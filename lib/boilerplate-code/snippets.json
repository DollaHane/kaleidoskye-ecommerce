{
  "console.log": {
    "prefix": "cl",
    "body": [
      "console.log('${1}', ${2})"
    ],
    "description": "console.log template"
  },
  "useState": {
    "prefix": "usr",
    "body": [
      "const [${1}, set${2}] = useState<${3}>()"
    ],
    "description": "React useState template"
  },
  "useMutation": {
    "prefix": "usm",
    "body": [
      "const { mutate: functionName } = useMutation({",
      " mutationFn: async (propId: any) => {",
      "    await axios.get('/api/pathName', propId)",
      "  },",
      "  onError: (error: AxiosError) => {",
      "    setIsSubmitting(false)",
      "    if (error.response?.status === 400) {",
      "      return toast({",
      "        title: 'Data Validation Error.',",
      "        description:",
      "          'There was an error processing the data provided. Please try again.',",
      "        variant: 'destructive',",
      "      })",
      "    }",
      "    if (error.response?.status === 401) {",
      "      return toast({",
      "        title: 'Authorisation Error.',",
      "        description: 'Operation was not authorised, please login.',",
      "        variant: 'destructive',",
      "      })",
      "    }",
      "    if (error.response?.status === 429) {",
      "      return toast({",
      "        title: 'Too Many Requests.',",
      "        description: 'Please wait 30sec before trying again.',",
      "        variant: 'destructive',",
      "      })",
      "    }",
      "    if (error.response?.status === 500) {",
      "      return toast({",
      "        title: 'Server Error.',",
      "        description:",
      "          'Failed to complete operation due to a server error. Please try again.',",
      "        variant: 'destructive',",
      "      })",
      "    }",
      "  },",
      "  onSuccess: () => {",
      "    return toast({",
      "      title: 'Success!',",
      "      description: 'Success message.',",
      "    })",
      "  },",
      "  onSettled: async (_, error) => {",
      "    if (error) {",
      "      console.log('onSettled error:', error)",
      "    } else {",
      "      await queryClient.invalidateQueries({ queryKey: ['key']})",
      "    }",
      "  }",
      "})"
    ],
    "description": "TanStack useMutation template"
  },
  "BUILD Form Component": {
    "prefix": "bldform",
    "body": [
      "\"use client\"",
      "",
      "import React, { useEffect, useState } from \"react\"",
      "import { useRouter } from \"next/navigation\"",
      "import { zodResolver } from \"@hookform/resolvers/zod\"",
      "import { useMutation } from \"@tanstack/react-query\"",
      "import { useQueryClient } from \"@tanstack/react-query\"",
      "import axios, { AxiosError } from \"axios\"",
      "import { Loader2 } from \"lucide-react\"",
      "import { useSession } from \"next-auth/react\"",
      "import { useForm } from \"react-hook-form\"",
      "import { z } from \"zod\"",
      "import { toast } from \"@/hooks/use-toast\"",
      "import {",
      "  Form,",
      "  FormControl,",
      "  FormField,",
      "  FormItem,",
      "  FormLabel,",
      "  FormMessage",
      "} from \"@/components/ui/form\"",
      "",
      "import { Button } from \"@/components/ui/button\"",
      "import { Input } from \"@/components/ui/input\"",
      "",
      "export const validateValue = z.object({",
      "  value: z",
      "    .string()",
      "    .min(3, { message: \"Value must be longer than 2 characters\" })",
      "    .max(100, { message: \"Value cannot be longer than 100 characters\" })",
      "})",
      "",
      "export type valueCreationRequest = z.infer<typeof validateValue>",
      "",
      "interface FormComponentProps {",
      "  prop: string",
      "}",
      "",
      "export default function FormComponent({ prop }: FormComponentProps) {",
      "  const { data: session } = useSession()",
      "  const router = useRouter()",
      "  const queryClient = useQueryClient()",
      "",
      "  const [isSubmitting, setIsSubmitting] = useState<boolean>(false)",
      "  const [disabled, setDisabled] = useState<boolean>(true)",
      "",
      "  const form = useForm({",
      "    resolver: zodResolver(validateValue),",
      "    defaultValues: {",
      "      value: \"\"",
      "    }",
      "  })",
      "",
      "  const { mutate: handleMutation } = useMutation({",
      "    mutationFn: async ({ value }: valueCreationRequest) => {",
      "      const payload: valueCreationRequest = { value }",
      "      const post = await axios.post(\"/api/path-to-route\", payload)",
      "      return post",
      "    },",
      "    onError: (error: AxiosError) => {",
      "      setIsSubmitting(false)",
      "      if (error.response?.status === 400) {",
      "        return toast({",
      "          title: 'Data Validation Error.',",
      "          description:",
      "            'There was an error processing the data provided. Please try again.',",
      "          variant: 'destructive',",
      "        })",
      "      }",
      "      if (error.response?.status === 401) {",
      "        return toast({",
      "          title: 'Authorisation Error.',",
      "          description: 'Operation was not authorised, please login.',",
      "          variant: 'destructive',",
      "        })",
      "      }",
      "      if (error.response?.status === 429) {",
      "        return toast({",
      "          title: 'Too Many Requests.',",
      "          description: 'Please wait 30sec before trying again.',",
      "          variant: 'destructive',",
      "        })",
      "      }",
      "      if (error.response?.status === 500) {",
      "        return toast({",
      "          title: 'Server Error.',",
      "          description:",
      "            'Failed to complete operation due to a server error. Please try again.',",
      "          variant: 'destructive',",
      "        })",
      "      }",
      "    },",
      "    onSuccess: () => {",
      "      setIsSubmitting(false)",
      "      form.reset()",
      "      return toast({",
      "        title: \"Success!\",",
      "        description: \"Your password was changed successfully!\"",
      "      })",
      "    },",
      "    onSettled: async (_, error) => {",
      "      if (error) {",
      "        console.log(\"onSettled error:\", error)",
      "      } else {",
      "        router.push('/path')",
      "        await queryClient.invalidateQueries({ queryKey: [\"key\"] })",
      "      }",
      "    }",
      "  })",
      "",
      "  function onSubmit(value: z.infer<typeof validateValue>) {",
      "    const payload: valueCreationRequest = {",
      "      value: value.value",
      "    }",
      "    handleMutation(payload)",
      "    setIsSubmitting(true)",
      "    return toast({",
      "      title: \"Form Submitted\",",
      "      description: \"Processing request.\"",
      "    })",
      "  }",
      "",
      "  return (",
      "    <div className=\"flex flex-col\">",
      "      <h1 className=\"mt-10 text-center\">Title</h1>",
      "      <Form {...form}>",
      "        <form",
      "          onSubmit={form.handleSubmit(onSubmit)}",
      "          className=\"mx-auto mt-5 w-full space-y-6 md:w-6/12\"",
      "        >",
      "          <FormField",
      "            control={form.control}",
      "            name=\"value\"",
      "            render={({ field }) => (",
      "              <FormItem>",
      "                <FormLabel>Value</FormLabel>",
      "                <FormControl>",
      "                  <Input {...field} />",
      "                </FormControl>",
      "                <FormMessage />",
      "              </FormItem>",
      "            )}",
      "          />",
      "          <Button",
      "            type=\"submit\"",
      "            variant=\"outline\"",
      "            className=\"flex relative items-center justify-center\"",
      "          >",
      "            {isSubmitting ? (",
      "              <Loader2 className=\"h-5 w-5 absolute flex animate-spin\" />",
      "            ) : (",
      "              \"Send\"",
      "            )}",
      "          </Button>",
      "        </form>",
      "      </Form>",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "Full form component with validation and mutation in Next.js"
  },
  "BUILD Post Handler": {
    "prefix": "bldpost",
    "body": [
      "import { headers } from \"next/headers\"",
      "import { db } from \"@/server/db\"",
      "import { ulid } from \"ulid\"",
      "import { redis } from \"@/server/upstash\"",
      "import { Ratelimit } from \"@upstash/ratelimit\"",
      "import { eq } from \"drizzle-orm\"",
      "import { z } from \"zod\"",
      "",
      "import { getAuthSession } from \"@/lib/auth/auth-options\"",
      "",
      "const rateLimit = new Ratelimit({",
      "  redis,",
      "  limiter: Ratelimit.slidingWindow(3, \"30 s\"),",
      "  analytics: true,",
      "})",
      "",
      "export async function POST(req: Request) {",
      "  try {",
      "    const session = await getAuthSession()",
      "",
      "    if (!session?.user.email) {",
      "      return new Response(\"Unauthorised.\", { status: 401 })",
      "    }",
      "",
      "    const ip = (await headers()).get(\"x-forwarded-for\")",
      "    const {",
      "      remaining,",
      "      limit,",
      "      success: limitReached,",
      "    } = await rateLimit.limit(ip!)",
      "    console.log(\"Rate Limit Stats:\", remaining, limit, limitReached)",
      "",
      "    const body = await req.json()",
      "    // const { x, x } = validator.parse(body)",
      "",
      "    const id = `id-${ulid()}`",
      "    const currentDate = new Date()",
      "",
      "    if (!limitReached) {",
      "      return new Response(\"API request limit reached\", { status: 429 })",
      "    } else {",
      "      const transaction = null",
      "",
      "      return new Response(`Successfully *** : ${transaction}`, {",
      "        status: 200,",
      "      })",
      "    }",
      "  } catch (error) {",
      "    if (error instanceof z.ZodError) {",
      "      return new Response(`Zod validation error: ${error.message}`, {",
      "        status: 400,",
      "      })",
      "    }",
      "    console.error(\"Failed to *** . ERROR:\", error)",
      "    return new Response(\"Failed to *** . Please try again later\", {",
      "      status: 500,",
      "    })",
      "  }",
      "}"
    ],
    "description": "Next.js API POST handler with rate limiting and error handling"
  },
  "BUILD Action Template": {
    "prefix": "bldact",
    "body": [
      "import { db } from \"@/server/db\"",
      "import { eq } from \"drizzle-orm\"",
      "import { getServerSession } from \"next-auth\"",
      "import { authOptions } from \"@/lib/auth/auth-options\"",
      "",
      "export async function get() {",
      "  try {",
      "    const session = await getServerSession(authOptions)",
      "",
      "    if (!session) {",
      "      console.log(\"... query unauthorised\")",
      "      return []",
      "    }",
      "    const user: any = []",
      "",
      "    // const user: userType[] = await db.select().from(users)",
      "",
      "    console.log(\" ... query successful\")",
      "    return user",
      "  } catch (error) {",
      "    console.error(\" ... query failed with error:\", error)",
      "    return []",
      "  }",
      "}"
    ],
    "description": "Next.js GET handler template with session validation"
  },
  "BUILD Service Template": {
    "prefix": "bldserv",
    "body": [
      "import { useQuery } from \"@tanstack/react-query\";",
      "import { get } from \"./action\";",
      "",
      "export async function UseGet() {",
      "  return useQuery<any[]>({",
      "    queryKey: [\"...\"],",
      "    queryFn: get",
      "  })",
      "}"
    ],
    "description": "React Query useQuery hook template"
  }
}